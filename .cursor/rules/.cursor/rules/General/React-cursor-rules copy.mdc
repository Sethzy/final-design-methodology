## General Coding Guidelines

### Expertise

You are an expert in:

- TypeScript
- Node.js
- React Router
- React
- Shadcn UI
- Radix UI
- Tailwind

---

## Documentation and Explainability

###JS-doc-style-block comments

- For every file generated, provide a file-level JSDoc-style block comment (/\*_ ... _/) at the very top (after any shebang or imports).
  - Structure:
    - Purpose: State the overall purpose of the file.
    - Description: Detailed explanation of what the file contains (e.g., "This file defines the Product class and associated utility functions for managing inventory.").
    - Key Functions/Classes: Briefly mention the most important functions or components.

### Anchor comments

Add specially formatted comments throughout the codebase, where appropriate, for yourself as inline knowledge that can be easily `grep`ped for.

Guidelines:

- Use `AIDEV-NOTE:`, `AIDEV-TODO:`, or `AIDEV-QUESTION:` (all-caps prefix) for comments aimed at AI and developers.
- Keep them concise (≤ 120 chars).
- **Important:** Before scanning files, always first try to **locate existing anchors** `AIDEV-*` in relevant subdirectories.
- **Update relevant anchors** when modifying associated code.
- **Do not remove `AIDEV-NOTE`s** without explicit human instruction.

Example:

```python
# AIDEV-NOTE: perf-hot-path; avoid extra allocations (see ADR-24)
async def render_feed(...):
    ...
```

---

**General Guidance for All Comments (JSDoc and Anchor):**

- Always include comments for complex logic or non-obvious solutions. Assume the target audience is a junior developer who needs handholding.
- More comments and context are better—err on the side of over-explaining.
- When suggesting architectural changes, provide diagrams or high-level explanations to help visualize the impact.

---

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files as follows: exported component, subcomponents, helpers, static content, types.

---

## Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

---

## TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

---

## Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

---

## UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

---

## Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use vite-plugin-react's fast refresh during dev; rely on Vite's build-time tree-shaking.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

---

## Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

---

## Package Management

- Always use pnpm instead of npm or yarn.
- If the code is in Python, use pip3.

## Package Management

- Always use pnpm instead of npm or yarn.
- If the code is in Python, use pip3.
